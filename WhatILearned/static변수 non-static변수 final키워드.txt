[java] 클래스 변수, 인스턴스 변수 차이(static변수와 non Static변수)

클래스 변수(Static 멤버)
클래스 내에 Static 키워드로 선언된 변수
처음 JVM이 실행되어 클래스가 메모리에 올라갈 때 ~ 프로그램이 종료될 때까지 유지
클래스가 여러 번 생성되어도 Static 변수는 처음 딱 한 번만 생성됨
동일한 클래스의 모든 객체들에 의해서 공유됨


인스턴스 변수(Non-static 멤버)
클래스 내에 선언된 변수
객체 생성 시마다 매번 새로운 변수가 생성됨
클래스 변수와 달리 공유되지 않음

클래스 변수, 인스턴스 변수, 지역 변수가 메모리에 적재되는 위치

지역변수
메소드 블럭 안에 선언된 변수로 메소드 호출 시점 ~ 메소드 종료 시점 동안 유지된다.

메모리에 적재되는 위치
위의 예제처럼 staticTest1, staticTest2 두 객체를 생성했을 때 
new()로 생성된 두 객체가 각각 Heap에 할당되고 
각 객체를 가리키는 staticTest1변수와 staticTest2변수가 stack에 생성된다.
인스턴스 변수와 지역변수는 객체가 생성될 때마다 Stack영역에 매번 새로 생성되지만 
클래스 변수는 Static Area에 한 개만 생성되고 하나의 영역을 공유한다.

클래스 변수(Static)의 주의점, 클래스 변수가 필요한 이유
실제 static 멤버의 생성 시점은 JVM에 따라 다르다.
보통 JVM은 필요한 대부분의 클래스를 처음부터 로딩하기 때문에 static멤버의 생성 시점은 JVM이 시작되는 시점이라고 할 수 있다.

제약조건
static 메소드는 오직 static멤버만 접근 가능
=> static메소드도 static멤버와 로드되는 시점이 동일하기 때문에 객체가 생성되지 않은 상황에서도 변수를 사용할 수 있어야 한다.
this 키워드 사용 불가
=> this는 호출 당시 실행 중인 객체를 가리키는 레퍼런스인데 static메소드는 객체가 생성되지 않은 상황에서도 호출이 가능하기 때문이다.

클래스 변수가 필요한 이유
자바는 캡슐화 원칙에 따라서 C/C++과 달리 어떤 변수나 함수도 클래스 바깥에 존재할 수 없다. 
따라서 전역변수나 전역메소드로 사용해야 할 경우 static을 이용해서 해결한다.

출처 : https://sujinhope.github.io/2021/03/03/Java-%ED%81%B4%EB%9E%98%EC%8A%A4%EB%B3%80%EC%88%98,-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4-%EB%B3%80%EC%88%98-%EC%B0%A8%EC%9D%B4(Static%EB%B3%80%EC%88%98%EC%99%80-Non-Static%EB%B3%80%EC%88%98).html

1. final 키워드
상수,메서드,클래스 3가지 경우에 같이 사용할 수 있다. 
그럼 상수부터 각 경우 final이 어떻게 쓰이는지 보도록 하자.

1) 상수정의에 사용
용도: 상수에 언제든 값을 한번 저장하고 다음에 다시 바꾸지 않을때 사용한다.
형태: final 타입 상수명

         final int a;
         //final int a=1; 상수 선언과 함께 값을 정의해도 된다.
		 Scanner s= new Scanner(System.in);
		 a=s.nextInt();
         //a=10; 오류 (값을 변경할 수 없다)
		 System.out.println(a);
위 예제의 결과는 사용자가 입력한 값이다. 
final int a를 선언만 한 뒤 사용자 입력을 받아 초기화 할 수도 있고 
아래 주석처럼 선언과 함께 값을 초기화 해도된다.
상수 정의후 만약 주석처리한  'a=10' 을 주석해제하여 실행하면 상수를 변경하려 하므로 컴파일에러가 난다.

2) 메서드에 사용
용도: 오버라이딩(재정의)을 못하게 만든다.
형태: final 반환형 메서드명(매개변수){}

class Test{
	public final void test2(){
		//내용정의
	}
}
public class Main extends Test{
	//public test2(){} compile error: final method는 오버라이딩 못함
}
위 예제에서 보는바와 같이 메서드에 final 키워드를 사용하여 오버라이딩이 불가하다.

3) 클래스에 사용
용도: 상속을 못하게 만든다.
형태: final class 클래스명{}

final class Test{
 int test;
}
//class Main extends Child{} final class는 상속할 수 없다
클래스에 final 키워드는 상속을 못하게 할때 사용한다. 
따라서 final 키워드를 사용한 Test클래스는 객체를 생성할 수 없다.

​
[출처] [Java] final 과 static final 차이|작성자 flzl2008
https://blog.naver.com/goddlaek/220889229659

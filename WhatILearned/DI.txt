### Dependency Injection

DI는 `의존성 주입`을 의미한다. 의존성 주입이란 하나의 객체 A가 다른 객체 B를 사용(의존)해야 할 때, A의 코드 내부에서 B를 만드는 것이 아니라, 외부(IoC 컨테이너)에서 B를 만들고 생성자 혹은 `setter` 메서드 등을 활용해 A 내부로 주입하는 것을 의미한다. 이러한 방식은 모듈 간의 결합을 낮춰 수정이 발생하였을 때 코드 변경지점을 최소화 할 수 있다는 장점이 있다.

### **의존성 주입 (Dependency Injection DI)이 필요한 이유**

```
public class Pencil {

}
```

```
public class Store {
 private Pencil pencil;
 public Store() {
 this.pencil = new Pencil();
 } }
```

위와 같은 예시 클래스는 크게 다음과 같은 문제점을 가지고 있다.

- 두 클래스가 강하게 결합되어 있다.
- 객체들 간의 관계가 아니라 클래스 간의 관계가 맺어지고 있다.
1. 두 클래스가 강하게 결합되어 있다.
    
    > 위와 같은 Store 클래스는 현재 Pencil 클래스와 강하게 결합되어 있다는 문제점을 가지고 있다. 두 클래스가 강하게 결합되어 있어서 만약 Store에서 Pencil이 아닌 Food와 같은 다른 상품을 판매하고자 한다면 Store 클래스의 생성자에 변경이 필요하다. 즉, 유연성이 떨어진다.각각의 다른 상품들을 판매하기 위해 생성자만 다르고 나머지는 중복되는 Store 클래스들이 파생되는 것은 좋지 않다. 이에 대한 해결책으로 상속을 떠올릴 수 있지만, 상속은 제약이 많고 확장성이 떨어지므로 피하는 것이 좋다.
    > 
2. 객체들 간의 관계가 아니라 클래스 간의 관계가 맺어지고 있다.
    
    > 위의 Store와 Pencil는 객체들 간의 관계가 아니라 클래스들 간의 관계가 맺어져 있다는 문제가 있다. 올바른 객체 지향적 설계라면 객체들 간에 관계가 맺어져야 하지만 현재는 Store 클래스와 Pencil 클래스가 관계를 맺고 있다. 객체들 간에 관계가 맺어졌다면 다른 객체의 구체 클래스(Pencil 인지 Food 인지 등)를 전혀 알지 못하더라도, (해당 클래스가 인터페이스를 구현했다면) 인터페이스 타입(Product)으로 사용할 수 있다.
    > 

**결국 위와 같은 문제점이 발생하는 근본적인 이유는 Store에서 불필요하게 어떤 제품을 판매할 지에 대한 관심이 분리되지 않았기 때문이다. Spring에서는 DI를 적용하여 이러한 문제를 해결하고자 하였다.**

**의존성 주입 (Dependency Injection DI)을 통한 문제 해결**위와 같은 문제를 해결하기 위해서는 다형성이 필요하다. Pencil.Food 등 여러 가지 제품을 하나로 표현하기 위해서는 Product 인터페이스를 우선 구현한다.

```
public interface Product {

}
```

```
public class Pencil implements Product {

}
```

이제 Store와 Pencil이 강하게 결합되어 있는 부분을 제거해주어야 한다. 이를 제거하기 위해서는 다음과 같이 외부에서 상품을 주입(Injection) 받아야한다.

```
public class Store {
	private Product product;
	public Store(Product product) {
    this.product = product;
    } }
```

여기서 Spring이 DI컨테이너를 필요로 하는 이유를 알 수 있는데, 우선 Store에서 Product 객체를 주입하기 위해서는 **애플리케이션 실행 시점에 필요한 객체(Bean)를 생성**해야 하며, **의존성이 있는 두 객체를 연결하기 위해 한 객체를 다른 객체로 주입**시켜야 하기 때문이다.ex) 다음과 같이 Pencil 이라는 객체를 만들고, 그 객체를 Store로 주입시켜주는 역할을 위해 DI 컨테이너가 필요하게 된 것이다.

```
public class BeanFactory {
public void store() {
// Bean의 생성
Product pencil = new Pencil();
// 의존성 주입
Store store = new Store(pencil);
} }
```

그리고 이러한 개념은 제어의 역전(Inversion of Control, IoC)라고 불리기도 한다.어떠한 객체를 사용할 지에 대한 책임이 BeanFactory와 같은 클래스에게 넘어갔고, 자신은 수동적으로 주입받는 객체를 사용하기 때문이다.(실제 Spring에서는 BeanFactory를 확장한 Application Context를 사용한다.)

### **의존성 주입 (Dependency Injection DI) 정리**

한 객체가 어떤 객체(구체 클래스)에 의존할 것인지는 별도의 관심사이고, Spring에서는 **DI 컨테이너를 통해 서로 강하게 결합되어 있는 두 클래스를 분리**하고, 두 객체 간의 관계를 결정해 줌으로써 **결합도를 낮추고 유연성을 확보**하고자 한다. 의존성 주입으로 애플리케이션 실행 시점에 객체를 생성하고 관계를 결정해 줌으로써 다른 구체 클래스에 의존하는 코드를 제거하며 서로 다른 두 객체의 결합을 약하게 만들어 준다. 또한 이 방법은 상속보다 유연하다.*단, 여기서 주의해야 하는 것은 다른 빈을 주입받으려면 자기 자신이 반드시 컨테이너의 빈이여야 한다는 것이다.*

- 두 객체 간의 관계라는 관심사의 분리
- 두 객체 간의 결합도를 낮춤
- 객체의 유연성을 높임
- 테스트 작성을 용이하게 함

하지만 의존 관계를 주입할 객체를 계속해서 생성하고 소멸한다면, 아무리 GC가 성능이 좋아졌다고 하더라도 부담이 된다. 그래서 Spring에서는 Bean들을 기본적으로 싱글톤(Singleton)으로 관리한다.

**두가지의 차이점은**제어의 역전(Inversion of Control)은 일반적인 디자인 패턴 중 하나이고의존성 주입(DI)는 이런 제어의 반전 패턴을 달성하는 방법 중 하나라고 볼 수 있다.

### 스프링의 다양한 의존성 주입방법

**1. 생성자 주입**

생성자에 @Autowired를 붙여 의존성을 주입받을 수 있다.

(Spring 4.3부터는 클래스의 생성자가 하나이고 그 생성자로 주입받을 객체가 빈으로 등록되어있따면 @Autowired를 생략할 수 있다.)

생성자주입은 생성자 호출시점에 (해당클래스의 인스턴스생성시) 1회 호출되는것이 보장된다.

따라서 주입받은 객체가 변하지 않거나, 반드시 객체주입이 필요한 경우에 강제하기 위해 사용된다.

```java
@Component
public class SampleController {
    private SampleRepository sampleRepository;

    @Autowired// 생성자가 한개만 있을시에 생략가능public SampleController(SampleRepository sampleRepository) {
        this.sampleRepository = sampleRepository;
    }
}

```

**2. 필드 주입**

멤버변수 선언부에 @Autowired애노테이션을 붙인다.

필드주입을 이용하면 코드가 간결해져서 과거에 많이 사용했던 방법이다.

하지만 필드 주입은 외부에서 변경이 불가능하다는 단점이 존재한다. 테스트코드의 중요성이 부각됨에 따라 필드의 필드객체를 수정할 수 없는 필드주입은 거의 사용하지 않게되었다.

또한 필드주입은 반드시 DI프레임워크가 존재해야 하므로 사용을 지양해야한다.

```java
@Component
public class SampleController {
    @Autowired
    private SampleRepository sampleRepository;
}
```

**3. Setter주입**

Setter메소드에 @Autowired애노테이션을 붙인다.

필드값을 변경하는 Setter를 통해서 의존관계를 주입하는 방법이다.

Setter주입은 생성자 주입과 달리 주입받는 객체가 변경될 가능성이 있는 경우에 사용한다. (다만 실제로 변경이 필요한 경우는 극히 드뭄)

```java
@Component
public class SampleController {
    private SampleRepository sampleRepository;

    @Autowired
    public void setSampleRepository(SampleRepository sampleRepository) {
        this.sampleRepository = sampleRepository;
    }
}

```

위 3개의 코드예시는 모두 동일하게 SampleController에 SampleRepository를 주입한다.

### **생성자를 통한 주입을 사용해야 하는 이유**

Spring에서 가장 권장하는 방법은 생성자를 통한 주입이다.

1. 생성자를 사용하면 **필수적으로 사용해야 하는 의존성 없이는 인스턴스를 만들지 못하도록** 강제할 수 있기 때문이다.

만약 SampleController가 SampleRepository없이는 제대로 동작할 수 없다면 SampleController에서 생성자를 통해 강제로 SampleRepository를 무조건 주입받은 후에야 인스턴스를 생성할 수 있도록 해야할것이다.

2.  생성자주입을 통해 **변경의가능성을 배제하고 불변성을 보장**할 수 있다.

3. **final 키워드 작성 및 롬복과의 결합**

생성자주입을 사용하면 필드객체에 final키워드를 사용할 수 있다. 이는 컴파일 시점에 누락된 의존성을 확인할수 있다.

반면 생성자 주입을 제외한 다른 주입방법들은 객체생성 이후 (생성자호출이후) 에 호출되므로 final키워드를 사용할 수 없다. ( 객체생성 이후에 필드값을 변하게 하는것이니까!)

또한 final키워드를 붙임으로서 Lombok과 결합되어 코드를 더 간결하게 작성할 수 있다.

롬복에는 final변수를 위한 생성자를 대신해주는 @RequiredArgsConstructor가 있다.

```java
@Slf4j
@RequiredArgsConstructor// Repository를 주입하기 위해 사용@Service
public class PostService {

    private final PostRepository postsRepository;
    private final ContractRepository contractRepository;
    private final UserRepository userRepository;
    private final UserService userService;
}
```

위와 같은 코드가 가능한 이유는 Spring에서 생성자가 1개인 경우 @Autowired를 생략할수 있도록 지원해주고, 해당 생성자를 Lombok(@RequiredArgsConstructor)로 구현했기 때문이다.

### 출처

[https://velog.io/@koo8624/Spring101-의존성-주입Dependency-Injection](https://velog.io/@koo8624/Spring101-%EC%9D%98%EC%A1%B4%EC%84%B1-%EC%A3%BC%EC%9E%85Dependency-Injection)

[https://velog.io/@mon99745/스프링-입문-핵심-정리-DI](https://velog.io/@mon99745/%EC%8A%A4%ED%94%84%EB%A7%81-%EC%9E%85%EB%AC%B8-%ED%95%B5%EC%8B%AC-%EC%A0%95%EB%A6%AC-DI)

[https://esoongan.tistory.com/90?category=915638](https://esoongan.tistory.com/90?category=915638)